generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["account", "author", "comic", "content", "story"]
}

model accounts {
  accountid              String        @id @default(uuid()) @db.Uuid
  profilename            String?       @db.VarChar(256)
  firstname              String?       @db.VarChar(256)
  lastname               String?       @db.VarChar(256)
  dateofbirth            DateTime?     @db.Timestamp(6)
  gender                 Int?
  refreshtoken           String?       @db.VarChar(256)
  refreshtokenexpirytime String?       @db.VarChar(256)
  avatar                 String?       @db.VarChar(500)
  status                 Int?
  location               String?
  activeddate            DateTime?     @db.Timestamp(6)
  username               String?       @db.VarChar(256)
  email                  String?       @db.VarChar(256)
  emailconfirmed         Boolean?
  passwordhash           String?
  phonenumber            String?
  phonenumberconfirmed   Boolean?
  memberships            memberships[]
  authors                authors[]

  @@schema("account")
}

model memberships {
  memberid       String    @id @db.Uuid
  fullname       String?   @db.VarChar(256)
  email          String?   @db.VarChar(256)
  phonenumber    String?   @db.VarChar(16)
  profilepicture String?   @db.VarChar(500)
  bio            String?
  joineddate     DateTime? @db.Timestamp(6)
  accountid      String    @db.Uuid
  status         String?   @db.VarChar(50)
  address        String?   @db.VarChar(256)
  accounts       accounts  @relation(fields: [accountid], references: [accountid], onDelete: NoAction)

  @@schema("account")
}

model authors {
  authorid    String    @id @db.Uuid
  fullname    String?   @db.VarChar(256)
  email       String?   @unique @db.VarChar(256)
  profileid   String?
  createddate DateTime? @db.Timestamp(6)
  accountid   String    @db.Uuid
  accounts    accounts  @relation(fields: [accountid], references: [accountid], onDelete: NoAction)
  posts       posts[]

  @@schema("content")
}

model posts {
  postid        String    @id @db.Uuid
  title         String    @db.VarChar(256)
  content       String?
  posterid      String    @db.Uuid
  publisheddate DateTime? @db.Timestamp(6)
  status        String?   @db.VarChar(256)
  authors       authors   @relation(fields: [posterid], references: [authorid], onDelete: NoAction)

  @@schema("content")
}

model author_authors {
  authorid     String         @id @db.Uuid
  authorname   String?        @db.VarChar(128)
  bio          String?
  comicauthors comicauthors[]
  storyauthors storyauthors[]

  @@map("authors")
  @@schema("author")
}

model comicauthors {
  id        String         @id @db.Uuid
  authorid  String         @db.Uuid
  comicname String
  authors   author_authors @relation(fields: [authorid], references: [authorid], onDelete: NoAction)
  comics    comics         @relation(fields: [comicname], references: [comicname], onDelete: NoAction)

  @@schema("comic")
}

model comicchapters {
  id          String @id @db.Uuid
  chapter     Int
  chaptername String
  comicname   String
  comics      comics @relation(fields: [comicname], references: [comicname], onDelete: NoAction)

  @@schema("comic")
}

model comics {
  comicname          String               @id
  content            String
  introimage         String?              @db.VarChar(500)
  type               String?              @db.VarChar(256)
  posteddate         DateTime?            @db.Timestamp(6)
  catalog            String               @db.Uuid
  description        String?
  chapters           Int?
  comicauthors       comicauthors[]
  comicchapters      comicchapters[]
  comictyperelations comictyperelations[]
  
  @@schema("comic")
}

model comictyperelations {
  id         String     @id @db.Uuid
  typeid     String     @db.Uuid
  comicname  String
  comics     comics     @relation(fields: [comicname], references: [comicname], onDelete: NoAction)
  comictypes comictypes @relation(fields: [typeid], references: [typeid], onDelete: NoAction)

  @@schema("comic")
}

model comictypes {
  typeid             String               @id @db.Uuid
  nametype           String
  comictyperelations comictyperelations[]

  @@schema("comic")
}

model stories {
  storyname          String               @id
  content            String
  storyimage         String?              @db.VarChar(500)
  type               String?              @db.VarChar(256)
  posteddate         DateTime?            @db.Timestamp(6)
  catalog            String               @db.Uuid
  description        String?
  storyauthors       storyauthors[]
  storychapters      storychapters[]
  storytyperelations storytyperelations[]

  @@schema("story")
}

model storyauthors {
  id        String         @id @db.Uuid
  authorid  String         @db.Uuid
  storyname String
  authors   author_authors @relation(fields: [authorid], references: [authorid], onDelete: NoAction)
  stories   stories        @relation(fields: [storyname], references: [storyname], onDelete: NoAction)

  @@schema("story")
}

model storychapters {
  id          String  @id @db.Uuid
  chapter     Int
  chaptername String
  storyname   String
  stories     stories @relation(fields: [storyname], references: [storyname], onDelete: NoAction)

  @@schema("story")
}

model storytyperelations {
  id         String     @id @db.Uuid
  typeid     String     @db.Uuid
  storyname  String
  stories    stories    @relation(fields: [storyname], references: [storyname], onDelete: NoAction)
  storytypes storytypes @relation(fields: [typeid], references: [typeid], onDelete: NoAction)

  @@schema("story")
}

model storytypes {
  typeid             String               @id @db.Uuid
  nametype           String
  storytyperelations storytyperelations[]

  @@schema("story")
}
